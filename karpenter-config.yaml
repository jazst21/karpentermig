apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: nodeGroup2Launch
spec:
  disruption:
    budgets:
    - nodes: 10%
    - duration: 8h
      nodes: '0'
      schedule: 0 9 * * mon-fri
    consolidateAfter: 1m | Never
    consolidationPolicy: WhenEmptyOrUnderutilized
  limits:
    cpu: '1000'
    memory: 1000Gi
  template:
    metadata:
      annotations:
        example.com/owner: my-team
      labels:
        billing-team: my-team
    spec:
      expireAfter: 720h | Never
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      requirements:
      - key: karpenter.k8s.aws/instance-category
        minValues: 2
        operator: In
        values:
        - c
        - m
        - r
      - key: karpenter.k8s.aws/instance-family
        minValues: 5
        operator: In
        values:
        - m5
        - m5d
        - c5
        - c5d
        - c4
        - r4
      - key: karpenter.k8s.aws/instance-cpu
        operator: In
        values:
        - '4'
        - '8'
        - '16'
        - '32'
      - key: karpenter.k8s.aws/instance-hypervisor
        operator: In
        values:
        - nitro
      - key: karpenter.k8s.aws/instance-generation
        operator: Gt
        values:
        - '2'
      - key: topology.kubernetes.io/zone
        operator: In
        values:
        - us-west-2a
        - us-west-2b
      - key: kubernetes.io/arch
        operator: In
        values:
        - arm64
        - amd64
      - key: karpenter.sh/capacity-type
        operator: In
        values:
        - spot
        - on-demand
      startupTaints:
      - effect: NoSchedule
        key: example.com/another-taint
      taints:
      - effect: NoSchedule
        key: example.com/special-taint
      terminationGracePeriod: 48h
  weight: 10
status:
  conditions:
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    message: NodeClaim hasn't succeeded launch
    observedGeneration: 1
    reason: NodeClaimNotLaunched
    status: 'False'
    type: Initialized
  resources:
    cpu: '20'
    ephemeral-storage: 100Gi
    memory: 8192Mi
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: updated
spec:
  amiFamily: AL2
  amiSelectorTerms:
  - tags:
      environment: test
      karpenter.sh/discovery: ${CLUSTER_NAME}
  - name: my-ami
  - id: ami-123
  associatePublicIPAddress: true
  blockDeviceMappings:
  - deviceName: /dev/xvda
    ebs:
      deleteOnTermination: true
      encrypted: true
      iops: 10000
      kmsKeyID: 1234abcd-12ab-34cd-56ef-1234567890ab
      snapshotID: snap-0123456789
      throughput: 125
      volumeSize: 100Gi
      volumeType: gp3
  detailedMonitoring: true
  instanceProfile: KarpenterNodeInstanceProfile-${CLUSTER_NAME}
  instanceStorePolicy: RAID0
  kubelet:
    clusterDNS:
    - 10.0.1.100
    cpuCFSQuota: true
    evictionHard:
      memory.available: 5%
      nodefs.available: 10%
      nodefs.inodesFree: 10%
    evictionMaxPodGracePeriod: 60
    evictionSoft:
      memory.available: 500Mi
      nodefs.available: 15%
      nodefs.inodesFree: 15%
    evictionSoftGracePeriod:
      memory.available: 1m
      nodefs.available: 1m30s
      nodefs.inodesFree: 2m
    imageGCHighThresholdPercent: 85
    imageGCLowThresholdPercent: 80
    kubeReserved:
      cpu: 200m
      ephemeral-storage: 3Gi
      memory: 100Mi
    maxPods: 20
    podsPerCore: 2
    systemReserved:
      cpu: 100m
      ephemeral-storage: 1Gi
      memory: 100Mi
  metadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 1
    httpTokens: required
  role: KarpenterNodeRole-${CLUSTER_NAME}
  securityGroupSelectorTerms:
  - tags:
      environment: test
      karpenter.sh/discovery: ${CLUSTER_NAME}
  - name: my-security-group
  - id: sg-063d7acfb4b06c82c
  subnetSelectorTerms:
  - tags:
      environment: test
      karpenter.sh/discovery: ${CLUSTER_NAME}
  - id: subnet-09fa4a0a8f233a921
  tags:
    app: team-a-app
    team: team-a
  userData: "echo \"Hello world\"    \n"
status:
  amis:
  - id: ami-01234567890123456
    name: custom-ami-amd64
    requirements:
    - key: kubernetes.io/arch
      operator: In
      values:
      - amd64
  - id: ami-01234567890123456
    name: custom-ami-arm64
    requirements:
    - key: kubernetes.io/arch
      operator: In
      values:
      - arm64
  conditions:
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    status: 'True'
    type: InstanceProfileReady
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    status: 'True'
    type: SubnetsReady
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    status: 'True'
    type: SecurityGroupsReady
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    status: 'True'
    type: AMIsReady
  - lastTransitionTime: '2024-02-02T19:54:34Z'
    status: 'True'
    type: Ready
  instanceProfile: ${CLUSTER_NAME}-0123456778901234567789
  securityGroups:
  - id: sg-041513b454818610b
    name: ClusterSharedNodeSecurityGroup
  - id: sg-0286715698b894bca
    name: ControlPlaneSecurityGroup-1AQ073TSAAPW
  subnets:
  - id: subnet-0a462d98193ff9fac
    zone: us-east-2b
  - id: subnet-0322dfafd76a609b6
    zone: us-east-2c
  - id: subnet-0727ef01daf4ac9fe
    zone: us-east-2b
  - id: subnet-00c99aeafe2a70304
    zone: us-east-2a
  - id: subnet-023b232fd5eb0028e
    zone: us-east-2c
  - id: subnet-03941e7ad6afeaa72
    zone: us-east-2a
